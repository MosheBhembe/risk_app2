const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const transporter = require('../Middleware/nodemailerconfig');

require('../Schemas/registrationData');
const Register = mongoose.model('Registration Data');

const autoGeneratedPassword = () => {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    let password = "";

    for (let i = 0; i < 6; i++) {
        password += chars.charAt(Math.floor(Math.random() * chars.length));
    }

    return password;
}

const registerUser = async (req, res) => {
    try {
        const { name, surname, emails, role, company } = req.body;

        // Check if the user already exists
        const RegisteredUser = await Register.findOne({ Email: emails });

        if (RegisteredUser) {
            return res.status(400).json({ message: "USER ALREADY EXISTS" });
        }

        // Generate and hash password
        const generatedPassword = autoGeneratedPassword();
        const hashedPassword = await bcrypt.hash(generatedPassword, 10);

        // Create new user
        const newUser = await Register.create({
            Name: name,
            Surname: surname,
            Email: emails,
            Role: role,
            Company: company,
            Password: hashedPassword,
        });

        const emailingPasswordInfo = `
        <div style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
            <h2 style="color: #007bff;">Dear ${newUser.Name},</h2>
            <p>We are pleased to inform you that your account has been successfully created in the <strong>RiskBT System</strong>.</p>
            <p>You can now access your account and start using our services to streamline your risk management processes.</p>
        
            <h3>Your Account Details:</h3>
            <ul>
                <li><strong>Email:</strong> ${newUser.Email}</li>
                <li><strong>Temporary Password:</strong> <span style="color: #d9534f;">${generatedPassword}</span></li>
                <li><strong>Position in ${newUser.Company}:</strong><span style="color: #007bff;"> ${newUser.Role}</span></li>
            </ul>

            <p>Please log in and change your password to something more secure and memorable.</p>
            <p>If you did not request this account or believe this was created in error, please contact our support team immediately at <a href="mailto:support@riskbt.com">support@riskbt.com</a>.</p>

            <p>Thank you for choosing <strong>RiskBT</strong>. We look forward to serving you!</p>

            <br>
            <p>Best Regards,</p>
            <p><strong>RiskBT Support Team</strong></p>
        </div>
        `;

        const emailOptions = {
            to: newUser.Email,
            from: "vsmlb96@gmail.com",
            subject: `Your RiskBT Account Has Been Successfully Created!`,
            html: emailingPasswordInfo
        };

        transporter.sendMail(emailOptions, (error, info) => {
            if (error) {
                return res.status(500).json({ status: 'Error', message: error.message });
            }

            return res.status(200).json({
                status: "ok",
                message: 'User created and email has been sent'
            });
        });

    } catch (error) {
        console.error(error);
        res.status(500).json({ status: 'Error', message: error.message });
    }
};

const delete_user = async (req, res) => {
    try {
        const { email } = req.body;
        const user = await Register.findOneAndDelete({ Email: email });

        if (!user) {
            return res.status(404).json({ message: "There is no user with that email" });
        }

        return res.status(200).json({ status: "success", message: "User deleted" });
    } catch (error) {
        return res.status(500).json({ status: "error", message: error.message });
    }
};

module.exports = { registerUser, delete_user };
